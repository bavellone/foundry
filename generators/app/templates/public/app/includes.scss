
@mixin bp-min($point) {
	@if $point == desktop {
		@media (min-width: $bp-lg) {
			@content;
		}
	} @else if $point == laptop {
		@media (min-width: $bp-md) {
			@content;
		}
	} @else if $point == tablet {
		@media (min-width: $bp-sm) {
			@content;
		}
	} @else if $point == phablet {
		@media (min-width: $bp-xs) {
			@content;
		}
	} @else {
		@media (min-width: $point) {
			@content;
		}
	}
}

@mixin bp-max($point) {
	@if $point == desktop {
		@media (max-width: $bp-lg) {
			@content;
		}
	} @else if $point == laptop {
		@media (max-width: $bp-md) {
			@content;
		}
	} @else if $point == tablet {
		@media (max-width: $bp-sm) {
			@content;
		}
	} @else if $point == phablet {
		@media (max-width: $bp-xs) {
			@content;
		}
	} @else if $point == phone {
		@media (max-width: $bp-xs) {
			@content;
		}
	} @else {
		@media (max-width: $point) {
			@content;
		}
	}
}

@mixin transition($transition...) {
	-moz-transition: $transition;
	-o-transition: $transition;
	-webkit-transition: $transition;
	transition: $transition;
}

@mixin transition-property($property...) {
	-moz-transition-property: $property;
	-o-transition-property: $property;
	-webkit-transition-property: $property;
	transition-property: $property;
}

@mixin transition-duration($duration...) {
	-moz-transition-property: $duration;
	-o-transition-property: $duration;
	-webkit-transition-property: $duration;
	transition-property: $duration;
}

@mixin transition-timing-function($timing...) {
	-moz-transition-timing-function: $timing;
	-o-transition-timing-function: $timing;
	-webkit-transition-timing-function: $timing;
	transition-timing-function: $timing;
}

@mixin transition-delay($delay...) {
	-moz-transition-delay: $delay;
	-o-transition-delay: $delay;
	-webkit-transition-delay: $delay;
	transition-delay: $delay;
}

@mixin transform($args...) {
	-webkit-transform: $args;
	-moz-transform: $args;
	-ms-transform: $args;
	-o-transform: $args;
	transform: $args;
}

@mixin keyframes($animation-name) {
	@-webkit-keyframes #{$animation-name} { @content; }
	@-moz-keyframes #{$animation-name} {	@content;	}
	@-ms-keyframes #{$animation-name} { @content; }
	@-o-keyframes #{$animation-name} {	@content;	}
	@keyframes #{$animation-name} { @content; }
}

@mixin animation($str) {
	-webkit-animation: #{$str};
	-moz-animation: #{$str};
	-o-animation: #{$str};
	animation: #{$str};
}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
	$primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
	$blur: nth(1.5 3 10 14 19, $depth) * 4px;
	$color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

	@return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
	$primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
	$blur: nth(1 3 3 5 6, $depth) * 4px;
	$color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

	@return 0 $primary-offset $blur $color;
}

/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin depth($depth) {
	@if $depth < 1 {
		box-shadow: none;
	} @else if $depth > 5 {
		@warn "Invalid $depth `#{$depth}` for mixin `card`.";
	} @else {
		box-shadow: bottom-shadow($depth), top-shadow($depth);
	}
}
